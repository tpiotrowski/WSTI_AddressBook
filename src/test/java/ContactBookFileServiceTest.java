/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import tp.interfaces.ContactBookLoaderAndPersister;
import tp.model.Person;
import tp.services.ContactBookFileService;
import tp.services.ContactBookLoaderAndPersisterFile;

//import org.junit.jupiter.api;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;

public class ContactBookFileServiceTest {

	public Person GetPerson() {
		var person = new Person();
		person.setName("Tomasz");
		person.setSurname("Kowalski");
		person.setPhone("555254125");

		return person;
	}

	@Test
	public void person_gen_id_test() {
		Person person = new Person();

		Assertions.assertNotNull(person.getId());

	}

	@Test
	public void test_init_method() {
		// arrange

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookLoaderAndPersisterFile.class);

		var array = new ArrayList<Person>();

		array.add(GetPerson());

		Mockito.when(persister.load()).thenReturn(array);

		// act
		ContactBookFileService service = new ContactBookFileService(persister);
		service.Initialize();

		// assert

		Assertions.assertFalse(service.getPersons().isEmpty());

	}

	@Test
	public void test_delete_method() {
		// arrange

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookLoaderAndPersisterFile.class);

		var array = new ArrayList<Person>();

		array.add(GetPerson());

		Mockito.when(persister.load()).thenReturn(array);

		// act
		ContactBookFileService service = new ContactBookFileService(persister);
		service.Initialize();

		var personToDelete = service.getPersons().get(0);

		Assertions.assertAll("Test delete", () -> Assertions.assertFalse(service.getPersons().isEmpty()),
				() -> Assertions.assertNotNull(personToDelete));

		service.deletePerson(personToDelete);

		Assertions.assertTrue(service.getPersons().isEmpty());

	}

	@Test
	public void test_delete_non_existing_method() {
		// arrange

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookLoaderAndPersisterFile.class);

		var array = new ArrayList<Person>();

		array.add(GetPerson());

		Mockito.when(persister.load()).thenReturn(array);

		// act
		ContactBookFileService service = new ContactBookFileService(persister);
		service.Initialize();

		service.deletePerson(new Person());

		Assertions.assertAll("Test delete", () -> Assertions.assertFalse(service.getPersons().isEmpty()));

		Assertions.assertFalse(service.getPersons().isEmpty());

	}

	@Test
	public void test_add_person_to_library() {

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookLoaderAndPersisterFile.class);

		Mockito.when(persister.load()).thenReturn(new ArrayList<Person>());

		ContactBookFileService service = new ContactBookFileService(persister);

		var person = new Person();
		person.setName("Tomasz");
		person.setSurname("Kowalski");
		person.setPhone("555254125");

		service.addPerson(person);

		var persons = service.getPersons();

		Assertions.assertFalse(persons.isEmpty());
	}

}
