
/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import tp.interfaces.ContactBookLoaderAndPersister;
import tp.model.Person;
import tp.services.ContactBookServiceImpl;
import tp.services.ContactBookFileLoaderAndPersister;

//import org.junit.jupiter.api;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.ArrayList;

public class ContactBookFileServiceTest {

	public Person GetPerson() {
		var person = new Person();
		person.setName("dasdasdsad");
		person.setSurname("asdsa");
		person.setPhone("555254125");

		return person;
	}

	@Test
	public void person_gen_id_test() {
		Person person = new Person();

		Assertions.assertNotNull(person.getId());

	}

	@Test
	public void test_init_method() throws Exception {
		// arrange

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);

		var array = new ArrayList<Person>();

		array.add(GetPerson());

		Mockito.when(persister.load()).thenReturn(array);

		// act
		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);
		service.Initialize();

		// assert

		Assertions.assertFalse(service.getPersons().isEmpty());

	}

	@Test
	public void test_delete_method() throws Exception {
		// arrange

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);

		var array = new ArrayList<Person>();

		array.add(GetPerson());

		Mockito.when(persister.load()).thenReturn(array);

		// act
		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);
		service.Initialize();

		var personToDelete = service.getPersons().get(0);

		Assertions.assertAll("Test delete", () -> Assertions.assertFalse(service.getPersons().isEmpty()),
				() -> Assertions.assertNotNull(personToDelete));

		service.deletePerson(personToDelete);

		Assertions.assertTrue(service.getPersons().isEmpty());

	}

	@Test
	public void test_delete_non_existing_method() throws Exception {
		// arrange

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);

		var array = new ArrayList<Person>();

		array.add(GetPerson());

		Mockito.when(persister.load()).thenReturn(array);

		// act
		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);
		service.Initialize();

		service.deletePerson(new Person());

		Assertions.assertAll("Test delete", () -> Assertions.assertFalse(service.getPersons().isEmpty()));

		Assertions.assertFalse(service.getPersons().isEmpty());

	}

	@Test
	public void test_add_person_to_library_existing() throws Exception {

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);

		Mockito.when(persister.load()).thenReturn(new ArrayList<Person>() {
			{
				add(GetPerson());
			}
		});

		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);

		service.Initialize();

		Assertions.assertAll("Test delete", () -> Assertions.assertFalse(service.getPersons().isEmpty()));

		var person = service.getPersons().get(0);

		person.setName("Ala_ma_kota");

		service.addPerson(person);

		var updPerson = service.getPersons().get(0);

		Assertions.assertEquals("Ala_ma_kota", updPerson.getName());
	}

	@Test
	public void test_add_person_to_library() throws Exception {

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);

		Mockito.when(persister.load()).thenReturn(new ArrayList<Person>());

		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);

		var person = new Person();
		person.setName("Tomasz");
		person.setSurname("Kowalski");
		person.setPhone("555254125");

		service.addPerson(person);

		var persons = service.getPersons();

		Assertions.assertFalse(persons.isEmpty());
	}

	@Test
	public void test_findPersonByNamoOrSurname() throws Exception {

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);
		var array = new ArrayList<Person>();

		var person = new Person();
		person.setName("Tomasz");
		person.setSurname("Kowalski");

		var person2 = new Person();
		person2.setName("Grzegorz");
		person2.setSurname("Kalita");

		Mockito.when(persister.load()).thenReturn(new ArrayList<Person>() {
			{
				add(person);
				add(person2);
			}
		});

		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);
		service.Initialize();

		var foundPerson = service.findPersonsByNamoOrSurname("masz");

		Assertions.assertNotNull(foundPerson, "Person to find");

		Assertions.assertAll("Get filters", () -> Assertions.assertEquals(foundPerson.get(0).getName(), "Tomasz"),
				() -> Assertions.assertEquals(foundPerson.get(0).getSurname(), "Kowalski"),
				() -> Assertions.assertEquals(foundPerson.get(0).getId(), person.getId()));

	}

	@Test
	public void test_findPersonByNamoOrSurname_empty_res() throws Exception {

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);
		var array = new ArrayList<Person>();

		var person = new Person();
		person.setName("Tomasz");
		person.setSurname("Kowalski");

		var person2 = new Person();
		person2.setName("Grzegorz");
		person2.setSurname("Kalita");

		Mockito.when(persister.load()).thenReturn(new ArrayList<Person>() {
			{
				add(person);
				add(person2);
			}
		});

		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);
		service.Initialize();

		var foundPerson = service.findPersonsByNamoOrSurname("xxx");

		Assertions.assertNotNull(foundPerson, "Person to find");
		Assertions.assertTrue(foundPerson.isEmpty(), "Person to find");
		

	}

	@Test
	public void test_findPersonByNamoOrSurname_multiple_res() throws Exception {

		ContactBookLoaderAndPersister persister = Mockito.mock(ContactBookFileLoaderAndPersister.class);
		var array = new ArrayList<Person>();

		var person = new Person();
		person.setName("Tomasz");
		person.setSurname("Kowalski");

		var person2 = new Person();
		person2.setName("Grzegorz");
		person2.setSurname("Kalita");

		Mockito.when(persister.load()).thenReturn(new ArrayList<Person>() {
			{
				add(person);
				add(person2);
			}
		});

		ContactBookServiceImpl service = new ContactBookServiceImpl(persister);
		service.Initialize();

		var foundPerson = service.findPersonsByNamoOrSurname("o");

		Assertions.assertNotNull(foundPerson, "Person to find");

		Assertions.assertAll("Get filters", 
				() -> Assertions.assertFalse(foundPerson.isEmpty()),
				() -> Assertions.assertEquals(foundPerson.size(),2));
	

	}

}
